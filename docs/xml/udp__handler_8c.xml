<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="udp__handler_8c" kind="file" language="C++">
    <compoundname>udp_handler.c</compoundname>
    <includes refid="udp__handler_8h" local="yes">udp_handler.h</includes>
    <incdepgraph>
      <node id="243">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="250">
        <label>nvs_flash.h</label>
      </node>
      <node id="252">
        <label>protocol_examples_common.h</label>
      </node>
      <node id="246">
        <label>esp_system.h</label>
      </node>
      <node id="251">
        <label>esp_netif.h</label>
      </node>
      <node id="247">
        <label>esp_wifi.h</label>
      </node>
      <node id="257">
        <label>lwip/netdb.h</label>
      </node>
      <node id="241">
        <label>string.h</label>
      </node>
      <node id="249">
        <label>esp_log.h</label>
      </node>
      <node id="242">
        <label>sys/param.h</label>
      </node>
      <node id="255">
        <label>lwip/sockets.h</label>
      </node>
      <node id="256">
        <label>lwip/sys.h</label>
      </node>
      <node id="254">
        <label>lwip/err.h</label>
      </node>
      <node id="248">
        <label>esp_event.h</label>
      </node>
      <node id="244">
        <label>freertos/task.h</label>
      </node>
      <node id="239">
        <label>/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/udp_handler.c</label>
        <link refid="udp__handler_8c"/>
        <childnode refid="240" relation="include">
        </childnode>
      </node>
      <node id="240">
        <label>udp_handler.h</label>
        <link refid="udp__handler_8h"/>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="249" relation="include">
        </childnode>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="255" relation="include">
        </childnode>
        <childnode refid="256" relation="include">
        </childnode>
        <childnode refid="257" relation="include">
        </childnode>
      </node>
      <node id="245">
        <label>freertos/event_groups.h</label>
      </node>
      <node id="253">
        <label>logger.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="udp__handler_8c_1a5a85b9c772bbeb480b209a3e6ea92b4c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <initializer>= &quot;udp_handler&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/udp_handler.c" line="3" column="1" bodyfile="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/udp_handler.c" bodystart="3" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="udp__handler_8c_1a412aa3402fc47e327861b48a04c3c08a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void network_manager</definition>
        <argsstring>(struct network_data *nm)</argsstring>
        <name>network_manager</name>
        <param>
          <type>struct <ref refid="structnetwork__data" kindref="compound">network_data</ref> *</type>
          <declname>nm</declname>
        </param>
        <briefdescription>
<para>Manages UDP connection to the server. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structnetwork__data" kindref="compound">network_data</ref> struct which contains necessary data for a UDP connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/udp_handler.c" line="11" column="1" bodyfile="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/udp_handler.c" bodystart="11" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="udp__handler_8c_1a7ddbd791c1d13c96db95eba36aae6145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int send_data</definition>
        <argsstring>(struct network_data *nm, char *payload)</argsstring>
        <name>send_data</name>
        <param>
          <type>struct <ref refid="structnetwork__data" kindref="compound">network_data</ref> *</type>
          <declname>nm</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
<para>Sends data to the server through a UDP socket. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="structnetwork__data" kindref="compound">network_data</ref> struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>char array which contains data to be sent </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int - returns -1 if sending failed, number of bytes sent if successfully sent the data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/udp_handler.c" line="38" column="1" bodyfile="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/udp_handler.c" bodystart="38" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="udp__handler_8c_1afe419fdd19f7194dcf9c9e6d00118224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* recieve_data</definition>
        <argsstring>(struct network_data *nm)</argsstring>
        <name>recieve_data</name>
        <param>
          <type>struct <ref refid="structnetwork__data" kindref="compound">network_data</ref> *</type>
          <declname>nm</declname>
        </param>
        <briefdescription>
<para>Receives data from UDP server. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structnetwork__data" kindref="compound">network_data</ref> struct which contains connection info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char array which contains data received </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/udp_handler.c" line="59" column="1" bodyfile="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/udp_handler.c" bodystart="59" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="udp__handler_8c_1a3e138ed94c89bd74c249c9f4a1a4c642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void close_network_manager</definition>
        <argsstring>(struct network_data *nm)</argsstring>
        <name>close_network_manager</name>
        <param>
          <type>struct <ref refid="structnetwork__data" kindref="compound">network_data</ref> *</type>
          <declname>nm</declname>
        </param>
        <briefdescription>
<para>Shutdown active connection, deallocate memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structtcp__network__data" kindref="compound">tcp_network_data</ref> struct which contains connection info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/udp_handler.c" line="85" column="1" bodyfile="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/udp_handler.c" bodystart="85" bodyend="93"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="udp__handler_8h" kindref="compound">udp_handler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TAG<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;udp_handler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="udp__handler_8c_1a412aa3402fc47e327861b48a04c3c08a" kindref="member">network_manager</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnetwork__data" kindref="compound">network_data</ref>*<sp/>nm)</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structnetwork__data_1a553d72b8506e9098215451adffd330d4" kindref="member">dest_addr</ref>.sin_addr.s_addr<sp/>=<sp/>inet_addr(<ref refid="udp__handler_8h_1a0755be366390c472fea523dda78961d3" kindref="member">HOST_IP_ADDR</ref>);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structnetwork__data_1a553d72b8506e9098215451adffd330d4" kindref="member">dest_addr</ref>.sin_family<sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structnetwork__data_1a553d72b8506e9098215451adffd330d4" kindref="member">dest_addr</ref>.sin_port<sp/>=<sp/>htons(<ref refid="udp__handler_8h_1a614217d263be1fb1a5f76e2ff7be19a2" kindref="member">PORT</ref>);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structnetwork__data_1a68f41514e366d2255d8ab802ec4ea146" kindref="member">addr_family</ref><sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structnetwork__data_1a2e35f88440947101eeeb8dc91a43d5e5" kindref="member">ip_protocol</ref><sp/>=<sp/>IPPROTO_IP;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>inet_ntoa_r(nm-&gt;<ref refid="structnetwork__data_1a553d72b8506e9098215451adffd330d4" kindref="member">dest_addr</ref>.sin_addr,<sp/>nm-&gt;<ref refid="structnetwork__data_1a6e8bd28f3dda27bcedd8b6e39257bf9e" kindref="member">addr_str</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nm-&gt;<ref refid="structnetwork__data_1a6e8bd28f3dda27bcedd8b6e39257bf9e" kindref="member">addr_str</ref>)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structnetwork__data_1ab056807bd5bb97ce18f27e6b233de0b3" kindref="member">sock</ref><sp/>=<sp/>socket(nm-&gt;<ref refid="structnetwork__data_1a68f41514e366d2255d8ab802ec4ea146" kindref="member">addr_family</ref>,<sp/>SOCK_DGRAM,<sp/>nm-&gt;<ref refid="structnetwork__data_1a2e35f88440947101eeeb8dc91a43d5e5" kindref="member">ip_protocol</ref>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nm-&gt;<ref refid="structnetwork__data_1ab056807bd5bb97ce18f27e6b233de0b3" kindref="member">sock</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>socket:<sp/>errno<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logI(TAG,<sp/></highlight><highlight class="stringliteral">&quot;Socket<sp/>created,<sp/>connected<sp/>to<sp/>%s:%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="udp__handler_8h_1a0755be366390c472fea523dda78961d3" kindref="member">HOST_IP_ADDR</ref>,<sp/><ref refid="udp__handler_8h_1a614217d263be1fb1a5f76e2ff7be19a2" kindref="member">PORT</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="udp__handler_8c_1a7ddbd791c1d13c96db95eba36aae6145" kindref="member">send_data</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnetwork__data" kindref="compound">network_data</ref>*<sp/>nm,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>payload)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>sendto(nm-&gt;<ref refid="structnetwork__data_1ab056807bd5bb97ce18f27e6b233de0b3" kindref="member">sock</ref>,<sp/>payload,<sp/>strlen(payload),<sp/>0,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)&amp;(nm-&gt;<ref refid="structnetwork__data_1a553d72b8506e9098215451adffd330d4" kindref="member">dest_addr</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nm-&gt;<ref refid="structnetwork__data_1a553d72b8506e9098215451adffd330d4" kindref="member">dest_addr</ref>));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>&lt;<sp/>0)<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>occurred<sp/>during<sp/>sending:<sp/>errno<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logD(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Message<sp/>sent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="udp__handler_8c_1afe419fdd19f7194dcf9c9e6d00118224" kindref="member">recieve_data</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnetwork__data" kindref="compound">network_data</ref>*<sp/>nm)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>source_addr;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>socklen_t<sp/>socklen<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(source_addr);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>recvfrom(nm-&gt;<ref refid="structnetwork__data_1ab056807bd5bb97ce18f27e6b233de0b3" kindref="member">sock</ref>,<sp/>nm-&gt;<ref refid="structnetwork__data_1a9346e7a82edd41c346d1528ef301469b" kindref="member">rx_buffer</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nm-&gt;<ref refid="structnetwork__data_1a9346e7a82edd41c346d1528ef301469b" kindref="member">rx_buffer</ref>)<sp/>-<sp/>1,<sp/>0,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)&amp;source_addr,<sp/>&amp;socklen);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>0)<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;recvfrom<sp/>failed:<sp/>errno<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structnetwork__data_1a9346e7a82edd41c346d1528ef301469b" kindref="member">rx_buffer</ref>[len]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Null-terminate<sp/>whatever<sp/>we<sp/>received<sp/>and<sp/>treat<sp/>like<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logD(TAG,<sp/></highlight><highlight class="stringliteral">&quot;Received<sp/>%d<sp/>bytes<sp/>from<sp/>%s:&quot;</highlight><highlight class="normal">,<sp/>len,<sp/>nm-&gt;<ref refid="structnetwork__data_1a6e8bd28f3dda27bcedd8b6e39257bf9e" kindref="member">addr_str</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logD(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>nm-&gt;<ref refid="structnetwork__data_1a9346e7a82edd41c346d1528ef301469b" kindref="member">rx_buffer</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nm-&gt;<ref refid="structnetwork__data_1a9346e7a82edd41c346d1528ef301469b" kindref="member">rx_buffer</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="udp__handler_8c_1a3e138ed94c89bd74c249c9f4a1a4c642" kindref="member">close_network_manager</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnetwork__data" kindref="compound">network_data</ref>*<sp/>nm)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>logI(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Shutting<sp/>down<sp/>socket&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>shutdown(nm-&gt;<ref refid="structnetwork__data_1ab056807bd5bb97ce18f27e6b233de0b3" kindref="member">sock</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>close(nm-&gt;<ref refid="structnetwork__data_1ab056807bd5bb97ce18f27e6b233de0b3" kindref="member">sock</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>free(nm-&gt;<ref refid="structnetwork__data_1a9346e7a82edd41c346d1528ef301469b" kindref="member">rx_buffer</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>free(nm-&gt;<ref refid="structnetwork__data_1a6e8bd28f3dda27bcedd8b6e39257bf9e" kindref="member">addr_str</ref>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>free(nm);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/udp_handler.c"/>
  </compounddef>
</doxygen>
