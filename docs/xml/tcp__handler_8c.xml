<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="tcp__handler_8c" kind="file" language="C++">
    <compoundname>tcp_handler.c</compoundname>
    <includes refid="tcp__handler_8h" local="yes">tcp_handler.h</includes>
    <incdepgraph>
      <node id="192">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="199">
        <label>nvs_flash.h</label>
      </node>
      <node id="201">
        <label>protocol_examples_common.h</label>
      </node>
      <node id="188">
        <label>/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/tcp_handler.c</label>
        <link refid="tcp__handler_8c"/>
        <childnode refid="189" relation="include">
        </childnode>
      </node>
      <node id="189">
        <label>tcp_handler.h</label>
        <link refid="tcp__handler_8h"/>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="198" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="202" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="204" relation="include">
        </childnode>
        <childnode refid="205" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
      </node>
      <node id="195">
        <label>esp_system.h</label>
      </node>
      <node id="200">
        <label>esp_netif.h</label>
      </node>
      <node id="196">
        <label>esp_wifi.h</label>
      </node>
      <node id="206">
        <label>lwip/netdb.h</label>
      </node>
      <node id="190">
        <label>string.h</label>
      </node>
      <node id="198">
        <label>esp_log.h</label>
      </node>
      <node id="191">
        <label>sys/param.h</label>
      </node>
      <node id="204">
        <label>lwip/sockets.h</label>
      </node>
      <node id="205">
        <label>lwip/sys.h</label>
      </node>
      <node id="203">
        <label>lwip/err.h</label>
      </node>
      <node id="197">
        <label>esp_event.h</label>
      </node>
      <node id="193">
        <label>freertos/task.h</label>
      </node>
      <node id="194">
        <label>freertos/event_groups.h</label>
      </node>
      <node id="202">
        <label>logger.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="tcp__handler_8c_1a5a85b9c772bbeb480b209a3e6ea92b4c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <initializer>= &quot;tcp_handler&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/tcp_handler.c" line="3" column="1" bodyfile="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/tcp_handler.c" bodystart="3" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="tcp__handler_8c_1a6be7633691ba5c012155871a84ade82e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tcp_network_manager</definition>
        <argsstring>(struct tcp_network_data *nm)</argsstring>
        <name>tcp_network_manager</name>
        <param>
          <type>struct <ref refid="structtcp__network__data" kindref="compound">tcp_network_data</ref> *</type>
          <declname>nm</declname>
        </param>
        <briefdescription>
<para>Manages TCP connection to the server. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structtcp__network__data" kindref="compound">tcp_network_data</ref> struct which contains necessary data for a TCP connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/tcp_handler.c" line="11" column="1" bodyfile="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/tcp_handler.c" bodystart="11" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="tcp__handler_8c_1a0ca62b309e39660b29ee7605b099ee54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tcp_send_data</definition>
        <argsstring>(struct tcp_network_data *nm, char *payload)</argsstring>
        <name>tcp_send_data</name>
        <param>
          <type>struct <ref refid="structtcp__network__data" kindref="compound">tcp_network_data</ref> *</type>
          <declname>nm</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
<para>Sends data to the server through a TCP socket. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="structtcp__network__data" kindref="compound">tcp_network_data</ref> struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>char array which contains data to be sent </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int - returns -1 if sending failed, number of bytes sent if successfully sent the data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/tcp_handler.c" line="49" column="1" bodyfile="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/tcp_handler.c" bodystart="49" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="tcp__handler_8c_1ae58555e8930155fcea5b1d16915db87b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* tcp_recieve_data</definition>
        <argsstring>(struct tcp_network_data *nm)</argsstring>
        <name>tcp_recieve_data</name>
        <param>
          <type>struct <ref refid="structtcp__network__data" kindref="compound">tcp_network_data</ref> *</type>
          <declname>nm</declname>
        </param>
        <briefdescription>
<para>Receives data from TCP server. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structtcp__network__data" kindref="compound">tcp_network_data</ref> struct which contains connection info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char array which contains data received </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/tcp_handler.c" line="77" column="1" bodyfile="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/tcp_handler.c" bodystart="77" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="tcp__handler_8c_1a6d6a248c21ebfece9f52fa7b580fabb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tcp_close_network_manager</definition>
        <argsstring>(struct tcp_network_data *nm)</argsstring>
        <name>tcp_close_network_manager</name>
        <param>
          <type>struct <ref refid="structtcp__network__data" kindref="compound">tcp_network_data</ref> *</type>
          <declname>nm</declname>
        </param>
        <briefdescription>
<para>Shutdown active connection, deallocate memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structtcp__network__data" kindref="compound">tcp_network_data</ref> struct which contains connection info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/tcp_handler.c" line="109" column="1" bodyfile="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/tcp_handler.c" bodystart="109" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tcp__handler_8h" kindref="compound">tcp_handler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TAG<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;tcp_handler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tcp__handler_8c_1a6be7633691ba5c012155871a84ade82e" kindref="member">tcp_network_manager</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtcp__network__data" kindref="compound">tcp_network_data</ref>*<sp/>nm)</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structtcp__network__data_1aac1fae2cd9f342a287fc728c2171e3d1" kindref="member">dest_addr</ref>.sin_addr.s_addr<sp/>=<sp/>inet_addr(<ref refid="tcp__handler_8h_1a30e0c38ad4a5d0a16bfdd52ff64189b4" kindref="member">TCP_HOST_IP_ADDR</ref>);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structtcp__network__data_1aac1fae2cd9f342a287fc728c2171e3d1" kindref="member">dest_addr</ref>.sin_family<sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structtcp__network__data_1aac1fae2cd9f342a287fc728c2171e3d1" kindref="member">dest_addr</ref>.sin_port<sp/>=<sp/>htons(<ref refid="tcp__handler_8h_1a637b73f06ee87043251d022f87a8f3d4" kindref="member">TCP_PORT</ref>);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structtcp__network__data_1a901043d5d480118c9e8661464465ae95" kindref="member">addr_family</ref><sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structtcp__network__data_1ac9025540ea4138efba1544b3fbbb2db3" kindref="member">ip_protocol</ref><sp/>=<sp/>IPPROTO_IP;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>inet_ntoa_r(nm-&gt;<ref refid="structtcp__network__data_1aac1fae2cd9f342a287fc728c2171e3d1" kindref="member">dest_addr</ref>.sin_addr,<sp/>nm-&gt;<ref refid="structtcp__network__data_1a5bb07a33391c99faa2caab2ef4477944" kindref="member">addr_str</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nm-&gt;<ref refid="structtcp__network__data_1a5bb07a33391c99faa2caab2ef4477944" kindref="member">addr_str</ref>)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structtcp__network__data_1a78063825cce60cb5f121e2c87ccb6dbb" kindref="member">sock</ref><sp/>=<sp/>socket(nm-&gt;<ref refid="structtcp__network__data_1a901043d5d480118c9e8661464465ae95" kindref="member">addr_family</ref>,<sp/>SOCK_STREAM,<sp/>nm-&gt;<ref refid="structtcp__network__data_1ac9025540ea4138efba1544b3fbbb2db3" kindref="member">ip_protocol</ref>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nm-&gt;<ref refid="structtcp__network__data_1a78063825cce60cb5f121e2c87ccb6dbb" kindref="member">sock</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>socket:<sp/>errno<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logI(TAG,<sp/></highlight><highlight class="stringliteral">&quot;Socket<sp/>created,<sp/>connected<sp/>to<sp/>%s:%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="tcp__handler_8h_1a30e0c38ad4a5d0a16bfdd52ff64189b4" kindref="member">TCP_HOST_IP_ADDR</ref>,<sp/><ref refid="tcp__handler_8h_1a637b73f06ee87043251d022f87a8f3d4" kindref="member">TCP_PORT</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>connect(nm-&gt;<ref refid="structtcp__network__data_1a78063825cce60cb5f121e2c87ccb6dbb" kindref="member">sock</ref>,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)&amp;nm-&gt;<ref refid="structtcp__network__data_1aac1fae2cd9f342a287fc728c2171e3d1" kindref="member">dest_addr</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nm-&gt;<ref refid="structtcp__network__data_1aac1fae2cd9f342a287fc728c2171e3d1" kindref="member">dest_addr</ref>));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcp__handler_8c_1a6d6a248c21ebfece9f52fa7b580fabb5" kindref="member">tcp_close_network_manager</ref>(nm);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;Socket<sp/>unable<sp/>to<sp/>connect:<sp/>errno<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structtcp__network__data_1a78063825cce60cb5f121e2c87ccb6dbb" kindref="member">sock</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logI(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Successfully<sp/>connected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tcp__handler_8c_1a0ca62b309e39660b29ee7605b099ee54" kindref="member">tcp_send_data</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtcp__network__data" kindref="compound">tcp_network_data</ref>*<sp/>nm,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>payload)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nm-&gt;<ref refid="structtcp__network__data_1a78063825cce60cb5f121e2c87ccb6dbb" kindref="member">sock</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Socket<sp/>doesnot<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>send(nm-&gt;<ref refid="structtcp__network__data_1a78063825cce60cb5f121e2c87ccb6dbb" kindref="member">sock</ref>,<sp/>payload,<sp/>strlen(payload),<sp/>0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>&lt;<sp/>0)<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>occurred<sp/>during<sp/>sending:<sp/>errno<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logD(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Message<sp/>sent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="tcp__handler_8c_1ae58555e8930155fcea5b1d16915db87b" kindref="member">tcp_recieve_data</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtcp__network__data" kindref="compound">tcp_network_data</ref>*<sp/>nm)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nm-&gt;<ref refid="structtcp__network__data_1a78063825cce60cb5f121e2c87ccb6dbb" kindref="member">sock</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Socket<sp/>doesnot<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>recv(nm-&gt;<ref refid="structtcp__network__data_1a78063825cce60cb5f121e2c87ccb6dbb" kindref="member">sock</ref>,<sp/>nm-&gt;<ref refid="structtcp__network__data_1aec4bca454d64124cd3a4b001f4a551cc" kindref="member">rx_buffer</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nm-&gt;<ref refid="structtcp__network__data_1aec4bca454d64124cd3a4b001f4a551cc" kindref="member">rx_buffer</ref>)<sp/>-<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>0)<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;recvfrom<sp/>failed:<sp/>errno<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nm-&gt;<ref refid="structtcp__network__data_1aec4bca454d64124cd3a4b001f4a551cc" kindref="member">rx_buffer</ref>[len]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Null-terminate<sp/>whatever<sp/>we<sp/>received<sp/>and<sp/>treat<sp/>like<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logD(TAG,<sp/></highlight><highlight class="stringliteral">&quot;Received<sp/>%d<sp/>bytes<sp/>from<sp/>%s:&quot;</highlight><highlight class="normal">,<sp/>len,<sp/>nm-&gt;<ref refid="structtcp__network__data_1a5bb07a33391c99faa2caab2ef4477944" kindref="member">addr_str</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logD(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>nm-&gt;<ref refid="structtcp__network__data_1aec4bca454d64124cd3a4b001f4a551cc" kindref="member">rx_buffer</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nm-&gt;<ref refid="structtcp__network__data_1aec4bca454d64124cd3a4b001f4a551cc" kindref="member">rx_buffer</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tcp__handler_8c_1a6d6a248c21ebfece9f52fa7b580fabb5" kindref="member">tcp_close_network_manager</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtcp__network__data" kindref="compound">tcp_network_data</ref>*<sp/>nm)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>logI(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Shutting<sp/>down<sp/>socket&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>shutdown(nm-&gt;<ref refid="structtcp__network__data_1a78063825cce60cb5f121e2c87ccb6dbb" kindref="member">sock</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>close(nm-&gt;<ref refid="structtcp__network__data_1a78063825cce60cb5f121e2c87ccb6dbb" kindref="member">sock</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>free(nm-&gt;<ref refid="structtcp__network__data_1aec4bca454d64124cd3a4b001f4a551cc" kindref="member">rx_buffer</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>free(nm-&gt;<ref refid="structtcp__network__data_1a5bb07a33391c99faa2caab2ef4477944" kindref="member">addr_str</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>free(nm);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/tcp_handler.c"/>
  </compounddef>
</doxygen>
