<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="json__handler_8c" kind="file" language="C++">
    <compoundname>json_handler.c</compoundname>
    <includes refid="json__handler_8h" local="yes">json_handler.h</includes>
    <incdepgraph>
      <node id="155">
        <label>cJSON.h</label>
      </node>
      <node id="153">
        <label>/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/json_handler.c</label>
        <link refid="json__handler_8c"/>
        <childnode refid="154" relation="include">
        </childnode>
      </node>
      <node id="154">
        <label>json_handler.h</label>
        <link refid="json__handler_8h"/>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
      </node>
      <node id="156">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="json__handler_8c_1a229aa3d7fb017d31499a5e29b78b7f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* create_pid_data_to_json</definition>
        <argsstring>(float current, float error, float P, float I, float D)</argsstring>
        <name>create_pid_data_to_json</name>
        <param>
          <type>float</type>
          <declname>current</declname>
        </param>
        <param>
          <type>float</type>
          <declname>error</declname>
        </param>
        <param>
          <type>float</type>
          <declname>P</declname>
        </param>
        <param>
          <type>float</type>
          <declname>I</declname>
        </param>
        <param>
          <type>float</type>
          <declname>D</declname>
        </param>
        <briefdescription>
<para>Converts PID data to a json string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current</parametername>
</parameternamelist>
<parameterdescription>
<para>current value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>error value, deviation of current from setpoint </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of Proportional Gain (P) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of Integral Gain (I) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of Derivative Gain (D) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char* - Json string of the data sent through parameters. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/json_handler.c" line="13" column="1" bodyfile="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/json_handler.c" bodystart="13" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="json__handler_8c_1a5a00fbe2cfe762fae40bd73932ddb072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structpid__const" kindref="compound">pid_const</ref></type>
        <definition>struct pid_const read_pid_data_from_json</definition>
        <argsstring>(const char *data)</argsstring>
        <name>read_pid_data_from_json</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Reads PID constant data from a json formatted string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char array containging the json formatted string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>struct <ref refid="structpid__const" kindref="compound">pid_const</ref> - Returns a array of PID constants, extracted from the json string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/json_handler.c" line="13" column="1" bodyfile="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/json_handler.c" bodystart="36" bodyend="48"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="json__handler_8h" kindref="compound">json_handler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="json__handler_8c_1a229aa3d7fb017d31499a5e29b78b7f08" kindref="member">create_pid_data_to_json</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>current,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>P,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>D)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>cJSON<sp/>*data<sp/>=<sp/>cJSON_CreateObject();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>json_string<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>cJSON_AddNumberToObject(data,<sp/></highlight><highlight class="stringliteral">&quot;current&quot;</highlight><highlight class="normal">,<sp/>current);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>cJSON_AddNumberToObject(data,<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>cJSON_AddNumberToObject(data,<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">,<sp/>P);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>cJSON_AddNumberToObject(data,<sp/></highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">,<sp/>I);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>cJSON_AddNumberToObject(data,<sp/></highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">,<sp/>D);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>json_string<sp/>=<sp/>cJSON_Print(data);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>cJSON_Delete(data);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>json_string;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpid__const" kindref="compound">pid_const</ref><sp/><ref refid="json__handler_8c_1a5a00fbe2cfe762fae40bd73932ddb072" kindref="member">read_pid_data_from_json</ref>(const<sp/>char*<sp/>data)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpid__const" kindref="compound">pid_const</ref><sp/>data_extracted;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cJSON<sp/>*data_json<sp/>=<sp/>cJSON_Parse(data);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>data_extracted.kp<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(data_json,<sp/></highlight><highlight class="stringliteral">&quot;Kp&quot;</highlight><highlight class="normal">)-&gt;valuedouble;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>data_extracted.ki<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(data_json,<sp/></highlight><highlight class="stringliteral">&quot;Ki&quot;</highlight><highlight class="normal">)-&gt;valuedouble;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>data_extracted.kd<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(data_json,<sp/></highlight><highlight class="stringliteral">&quot;Kd&quot;</highlight><highlight class="normal">)-&gt;valuedouble;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>data_extracted.setpoint<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(data_json,<sp/></highlight><highlight class="stringliteral">&quot;SetPoint&quot;</highlight><highlight class="normal">)-&gt;valuedouble;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>cJSON_Delete(data_json);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_extracted;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/vedant/Programming/projects/pid-tuning-gui/esp_codes/components/pid_plotter/json_handler.c"/>
  </compounddef>
</doxygen>
